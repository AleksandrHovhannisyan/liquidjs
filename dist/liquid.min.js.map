{"version":3,"file":"liquid.min.js","sources":["../src/util/underscore.ts","../src/parser/lexical.ts","../src/util/error.ts","../src/util/assert.ts","../src/liquid-options.ts","../src/scope/block-mode.ts","../src/scope/scope.ts","../src/scope/scopes.ts","../src/fs/browser.ts","../src/parser/token.ts","../src/parser/tokenizer.ts","../src/parser/html-token.ts","../src/parser/delimited-token.ts","../src/parser/tag-token.ts","../src/parser/output-token.ts","../src/parser/whitespace-ctrl.ts","../src/render/render.ts","../src/render/syntax.ts","../src/template/tag/hash.ts","../src/template/template.ts","../src/template/tag/tag.ts","../src/template/filter/filter.ts","../src/parser/parse-stream.ts","../src/template/value.ts","../src/template/output.ts","../src/template/html.ts","../src/parser/parser.ts","../src/builtin/tags/assign.ts","../src/util/promise.ts","../src/builtin/tags/for.ts","../src/builtin/tags/capture.ts","../src/builtin/tags/case.ts","../src/builtin/tags/comment.ts","../src/builtin/tags/include.ts","../src/builtin/tags/decrement.ts","../src/builtin/tags/cycle.ts","../src/builtin/tags/if.ts","../src/builtin/tags/increment.ts","../src/builtin/tags/layout.ts","../src/builtin/tags/block.ts","../src/builtin/tags/raw.ts","../src/builtin/tags/tablerow.ts","../src/builtin/tags/index.ts","../src/builtin/tags/unless.ts","../src/builtin/tags/break.ts","../src/builtin/tags/continue.ts","../src/builtin/filters/html.ts","../src/builtin/filters/string.ts","../src/builtin/filters/math.ts","../src/builtin/filters/url.ts","../src/builtin/filters/array.ts","../src/util/strftime.ts","../src/builtin/filters/index.ts","../src/builtin/filters/date.ts","../src/builtin/filters/object.ts","../src/liquid.ts"],"sourcesContent":["const toStr = Object.prototype.toString\nconst arrToStr = Array.prototype.toString\n\n/*\n * Checks if value is classified as a String primitive or object.\n * @param {any} value The value to check.\n * @return {Boolean} Returns true if value is a string, else false.\n */\nexport function isString (value: any) {\n  return toStr.call(value) === '[object String]'\n}\n\nexport function isFunction (value: any) {\n  return typeof value === 'function'\n}\n\nexport function promisify<T1, T2> (fn: (arg1: T1, cb: (err: Error | null, result: T2) => void) => void): (arg1: T1) => Promise<T2>;\nexport function promisify<T1, T2, T3> (fn: (arg1: T1, arg2: T2, cb: (err: Error | null, result: T3) => void) => void):(arg1: T1, arg2: T2) => Promise<T3>;\nexport function promisify (fn: any) {\n  return function (...args: any[]) {\n    return new Promise((resolve, reject) => {\n      fn(...args, (err: Error, result: any) => {\n        err ? reject(err) : resolve(result)\n      })\n    })\n  }\n}\n\nexport function stringify (value: any): string {\n  if (isNil(value)) return ''\n  if (isFunction(value.to_liquid)) return stringify(value.to_liquid())\n  if (isFunction(value.toLiquid)) return stringify(value.toLiquid())\n  if (isFunction(value.to_s)) return value.to_s()\n  if ([toStr, arrToStr].indexOf(value.toString) > -1) return defaultToString(value)\n  if (isFunction(value.toString)) return value.toString()\n  return toStr.call(value)\n}\n\nfunction defaultToString (value: any): string {\n  const cache: string[] = []\n  return JSON.stringify(value, (key, value) => {\n    if (isObject(value)) {\n      if (cache.indexOf(value) !== -1) {\n        return\n      }\n      cache.push(value)\n    }\n    return value\n  })\n}\n\nexport function create<T1 extends object, T2 extends T1 = T1> (proto: T1): T2 {\n  return Object.create(proto)\n}\n\nexport function isNil (value: any): boolean {\n  return value === null || value === undefined\n}\n\nexport function isArray (value: any): boolean {\n  // be compatible with IE 8\n  return toStr.call(value) === '[object Array]'\n}\n\nexport function isError (value: any): boolean {\n  const signature = toStr.call(value)\n  // [object XXXError]\n  return signature.substr(-6, 5) === 'Error' ||\n        (typeof value.message === 'string' && typeof value.name === 'string')\n}\n\n/*\n * Iterates over own enumerable string keyed properties of an object and invokes iteratee for each property.\n * The iteratee is invoked with three arguments: (value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning false.\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @return {Object} Returns object.\n */\nexport function forOwn <T> (\n  object: {[key: string]: T} | undefined,\n  iteratee: ((val: T, key: string, obj: {[key: string]: T}) => boolean | void)\n) {\n  object = object || {}\n  for (const k in object) {\n    if (object.hasOwnProperty(k)) {\n      if (iteratee(object[k], k, object) === false) break\n    }\n  }\n  return object\n}\n\nexport function last <T>(arr: T[]): T;\nexport function last (arr: string): string;\nexport function last (arr: any[] | string): any | string {\n  return arr[arr.length - 1]\n}\n\n/*\n * Checks if value is the language type of Object.\n * (e.g. arrays, functions, objects, regexes, new Number(0), and new String(''))\n * @param {any} value The value to check.\n * @return {Boolean} Returns true if value is an object, else false.\n */\nexport function isObject (value: any): boolean {\n  const type = typeof value\n  return value !== null && (type === 'object' || type === 'function')\n}\n\n/*\n * A function to create flexibly-numbered lists of integers,\n * handy for each and map loops. start, if omitted, defaults to 0; step defaults to 1.\n * Returns a list of integers from start (inclusive) to stop (exclusive),\n * incremented (or decremented) by step, exclusive.\n * Note that ranges that stop before they start are considered to be zero-length instead of\n * negative â€” if you'd like a negative range, use a negative step.\n */\nexport function range (start: number, stop?: number, step?: number) {\n  if (stop === undefined) {\n    stop = start\n    start = 0\n  }\n  step = step || 1\n\n  const arr: number[] = []\n  for (let i = start; i < stop; i += step) {\n    arr.push(i)\n  }\n  return arr\n}\n\nexport function padStart (str: any, length: number, ch: string = ' ') {\n  str = String(str)\n  let n = length - str.length\n  while (n-- > 0) str = ch + str\n  return str\n}\n","// quote related\nconst singleQuoted = /'[^']*'/\nconst doubleQuoted = /\"[^\"]*\"/\nexport const quoted = new RegExp(`${singleQuoted.source}|${doubleQuoted.source}`)\nexport const quoteBalanced = new RegExp(`(?:${quoted.source}|[^'\"])*`)\n\n// basic types\nexport const integer = /-?\\d+/\nexport const number = /[+-]?(?:\\d+\\.?\\d*|\\.?\\d+)/\nexport const bool = /true|false/\n\n// property access\nexport const identifier = /[\\w-]+[?]?/\nexport const subscript = new RegExp(`\\\\[(?:${quoted.source}|[\\\\w-\\\\.]+)\\\\]`)\nexport const literal = new RegExp(`(?:${quoted.source}|${bool.source}|${number.source})`)\nexport const variable = new RegExp(`${identifier.source}(?:\\\\.${identifier.source}|${subscript.source})*`)\n\n// range related\nexport const rangeLimit = new RegExp(`(?:${variable.source}|${number.source})`)\nexport const range = new RegExp(`\\\\(${rangeLimit.source}\\\\.\\\\.${rangeLimit.source}\\\\)`)\nexport const rangeCapture = new RegExp(`\\\\((${rangeLimit.source})\\\\.\\\\.(${rangeLimit.source})\\\\)`)\n\nexport const value = new RegExp(`(?:${variable.source}|${literal.source}|${range.source})`)\n\n// hash related\nexport const hash = new RegExp(`(?:${identifier.source})\\\\s*:\\\\s*(?:${value.source})`)\nexport const hashCapture = new RegExp(`(${identifier.source})\\\\s*:\\\\s*(${value.source})`, 'g')\n\n// full match\nexport const tagLine = new RegExp(`^\\\\s*(${identifier.source})\\\\s*([\\\\s\\\\S]*?)\\\\s*$`)\nexport const literalLine = new RegExp(`^${literal.source}$`, 'i')\nexport const variableLine = new RegExp(`^${variable.source}$`)\nexport const numberLine = new RegExp(`^${number.source}$`)\nexport const boolLine = new RegExp(`^${bool.source}$`, 'i')\nexport const quotedLine = new RegExp(`^${quoted.source}$`)\nexport const rangeLine = new RegExp(`^${rangeCapture.source}$`)\nexport const integerLine = new RegExp(`^${integer.source}$`)\n\n// filter related\nexport const valueDeclaration = new RegExp(`(?:${identifier.source}\\\\s*:\\\\s*)?${value.source}`)\nexport const valueList = new RegExp(`${valueDeclaration.source}(\\\\s*,\\\\s*${valueDeclaration.source})*`)\nexport const filter = new RegExp(`${identifier.source}(?:\\\\s*:\\\\s*${valueList.source})?`, 'g')\nexport const filterCapture = new RegExp(`(${identifier.source})(?:\\\\s*:\\\\s*(${valueList.source}))?`)\nexport const filterLine = new RegExp(`^${filterCapture.source}$`)\n\nexport const operators = [\n  /\\s+or\\s+/,\n  /\\s+and\\s+/,\n  /==|!=|<=|>=|<|>|\\s+contains\\s+/\n]\n\nexport function isInteger (str: string) {\n  return integerLine.test(str)\n}\n\nexport function isLiteral (str: string) {\n  return literalLine.test(str)\n}\n\nexport function isRange (str: string) {\n  return rangeLine.test(str)\n}\n\nexport function isVariable (str: string) {\n  return variableLine.test(str)\n}\n\nexport function matchValue (str: string) {\n  return value.exec(str)\n}\n\nexport function parseLiteral (str: string) {\n  let res = str.match(numberLine)\n  if (res) {\n    return Number(str)\n  }\n  res = str.match(boolLine)\n  if (res) {\n    return str.toLowerCase() === 'true'\n  }\n  res = str.match(quotedLine)\n  if (res) {\n    return str.slice(1, -1)\n  }\n  throw new TypeError(`cannot parse '${str}' as literal`)\n}\n","import * as _ from './underscore'\nimport Token from 'src/parser/token'\nimport ITemplate from 'src/template/itemplate'\n\nabstract class LiquidError extends Error {\n  private token: Token\n  private originalError: Error\n  constructor (err: Error, token: Token) {\n    super(err.message)\n    this.originalError = err\n    this.token = token\n  }\n  protected update () {\n    const err = this.originalError\n    const context = mkContext(this.token)\n    this.message = mkMessage(err.message, this.token)\n    this.stack = this.message + '\\n' + context +\n      '\\n' + this.stack + '\\nFrom ' + err.stack\n  }\n}\n\nexport class TokenizationError extends LiquidError {\n  constructor (message: string, token: Token) {\n    super(new Error(message), token)\n    this.name = 'TokenizationError'\n    super.update()\n  }\n}\n\nexport class ParseError extends LiquidError {\n  constructor (err: Error, token: Token) {\n    super(err, token)\n    this.name = 'ParseError'\n    this.message = err.message\n    super.update()\n  }\n}\n\nexport class RenderError extends LiquidError {\n  constructor (err: Error, tpl: ITemplate) {\n    super(err, tpl.token)\n    this.name = 'RenderError'\n    this.message = err.message\n    super.update()\n  }\n}\n\nexport class RenderBreakError extends Error {\n  resolvedHTML: string = ''\n  constructor (message: string) {\n    super(message)\n    this.name = 'RenderBreakError'\n    this.message = message + ''\n  }\n}\n\nexport class AssertionError extends Error {\n  constructor (message: string) {\n    super(message)\n    this.name = 'AssertionError'\n    this.message = message + ''\n  }\n}\n\nfunction mkContext (token: Token) {\n  const lines = token.input.split('\\n')\n  const begin = Math.max(token.line - 2, 1)\n  const end = Math.min(token.line + 3, lines.length)\n\n  const context = _\n    .range(begin, end + 1)\n    .map(lineNumber => {\n      const indicator = (lineNumber === token.line) ? '>> ' : '   '\n      const num = _.padStart(String(lineNumber), String(end).length)\n      const text = lines[lineNumber - 1]\n      return `${indicator}${num}| ${text}`\n    })\n    .join('\\n')\n\n  return context\n}\n\nfunction mkMessage (msg: string, token: Token) {\n  if (token.file) msg += `, file:${token.file}`\n  msg += `, line:${token.line}, col:${token.col}`\n  return msg\n}\n","import { AssertionError } from './error'\n\nexport default function (predicate: any, message?: string) {\n  if (!predicate) {\n    message = message || `expect ${predicate} to be true`\n    throw new AssertionError(message)\n  }\n}\n","/* eslint-disable camelcase */\n\nimport * as _ from './util/underscore'\n\nexport interface LiquidOptions {\n  /** `root` is a directory or an array of directories to resolve layouts and includes, as well as the filename passed in when calling `.renderFile()`. If an array, the files are looked up in the order they occur in the array. Defaults to `[\".\"]` */\n  root?: string | string[]\n  /** `extname` is used to lookup the template file when filepath doesn't include an extension name. Eg: setting to `\".html\"` will allow including file by basename. Defaults to `\"\"`. */\n  extname?: string\n  /** `cache` indicates whether or not to cache resolved templates. Defaults to `false`. */\n  cache?: boolean\n  /** `dynamicPartials`: if set, treat `<filepath>` parameter in `{%include filepath %}`, `{%layout filepath%}` as a variable, otherwise as a literal value. Defaults to `true`. */\n  dynamicPartials?: boolean\n  /** `strict_filters` is used to enable strict filter existence. If set to `false`, undefined filters will be rendered as empty string. Otherwise, undefined filters will cause an exception. Defaults to `false`. */\n  strict_filters?: boolean\n  /** `strict_variables` is used to enable strict variable derivation.  If set to `false`, undefined variables will be rendered as empty string.  Otherwise, undefined variables will cause an exception. Defaults to `false`. */\n  strict_variables?: boolean\n  /** `trim_tag_right` is used to strip blank characters (including ` `, `\\t`, and `\\r`) from the right of tags (`{% %}`) until `\\n` (inclusive). Defaults to `false`. */\n  trim_tag_right?: boolean\n  /** `trim_tag_left` is similar to `trim_tag_right`, whereas the `\\n` is exclusive. Defaults to `false`. See Whitespace Control for details. */\n  trim_tag_left?: boolean\n  /** ``trim_output_right` is used to strip blank characters (including ` `, `\\t`, and `\\r`) from the right of values (`{{ }}`) until `\\n` (inclusive). Defaults to `false`. */\n  trim_output_right?: boolean\n  /** `trim_output_left` is similar to `trim_output_right`, whereas the `\\n` is exclusive. Defaults to `false`. See Whitespace Control for details. */\n  trim_output_left?: boolean\n  /** `tag_delimiter_left` and `tag_delimiter_right` are used to override the delimiter for liquid tags **/\n  tag_delimiter_left?: string,\n  tag_delimiter_right?: string,\n  /** `output_delimiter_left` and `output_delimiter_right` are used to override the delimiter for liquid outputs **/\n  output_delimiter_left?: string,\n  output_delimiter_right?: string,\n  /** `greedy` is used to specify whether `trim_left`/`trim_right` is greedy. When set to `true`, all consecutive blank characters including `\\n` will be trimed regardless of line breaks. Defaults to `true`. */\n  greedy?: boolean\n}\n\nexport interface NormalizedOptions extends LiquidOptions {\n  root?: string[]\n}\n\nexport interface NormalizedFullOptions extends NormalizedOptions {\n  root: string[]\n  extname: string\n  cache: boolean\n  dynamicPartials: boolean\n  strict_filters: boolean\n  strict_variables: boolean\n  trim_tag_right: boolean\n  trim_tag_left: boolean\n  trim_output_right: boolean\n  trim_output_left: boolean\n  tag_delimiter_left: string,\n  tag_delimiter_right: string,\n  output_delimiter_left: string,\n  output_delimiter_right: string,\n  greedy: boolean\n}\n\nconst defaultOptions: NormalizedFullOptions = {\n  root: ['.'],\n  cache: false,\n  extname: '',\n  dynamicPartials: true,\n  trim_tag_right: false,\n  trim_tag_left: false,\n  trim_output_right: false,\n  trim_output_left: false,\n  greedy: true,\n  tag_delimiter_left: '{%',\n  tag_delimiter_right: '%}',\n  output_delimiter_left: '{{',\n  output_delimiter_right: '}}',\n  strict_filters: false,\n  strict_variables: false\n}\n\nexport function normalize (options?: LiquidOptions): NormalizedOptions {\n  options = options || {}\n  if (options.hasOwnProperty('root')) {\n    options.root = normalizeStringArray(options.root)\n  }\n  return options as NormalizedOptions\n}\n\nexport function applyDefault (options?: NormalizedOptions): NormalizedFullOptions {\n  return { ...defaultOptions, ...options }\n}\n\nfunction normalizeStringArray (value: any): string[] {\n  if (_.isArray(value)) return value as string[]\n  if (_.isString(value)) return [value as string]\n  return []\n}\n","enum BlockMode {\n  /* store rendered html into blocks */\n  OUTPUT,\n  /* output rendered html directly */\n  STORE\n}\n\nexport default BlockMode\n","import * as _ from '../util/underscore'\nimport { __assign } from 'tslib'\nimport * as lexical from '../parser/lexical'\nimport assert from '../util/assert'\nimport { NormalizedFullOptions, applyDefault } from '../liquid-options'\nimport BlockMode from './block-mode'\nimport IContext from './icontext'\n\nexport default class Scope {\n  opts: NormalizedFullOptions\n  contexts: Array<IContext>\n  blocks: object = {}\n  groups: {[key: string]: number} = {}\n  blockMode: BlockMode = BlockMode.OUTPUT\n  constructor (ctx: object = {}, opts?: NormalizedFullOptions) {\n    this.opts = applyDefault(opts)\n    this.contexts = [ctx || {}]\n  }\n  getAll () {\n    return this.contexts.reduce((ctx, val) => __assign(ctx, val), {})\n  }\n  get (path: string): any {\n    const paths = this.propertyAccessSeq(path)\n    const scope = this.findContextFor(paths[0]) || _.last(this.contexts)\n    return paths.reduce((value, key) => this.readProperty(value, key), scope)\n  }\n  set (path: string, v: any): void {\n    const paths = this.propertyAccessSeq(path)\n    let scope = this.findContextFor(paths[0]) || _.last(this.contexts)\n    paths.some((key, i) => {\n      if (!_.isObject(scope)) {\n        return true\n      }\n      if (i === paths.length - 1) {\n        scope[key] = v\n        return true\n      }\n      if (undefined === scope[key]) {\n        scope[key] = {}\n      }\n      scope = scope[key]\n      return false\n    })\n  }\n  unshift (ctx: object) {\n    return this.contexts.unshift(ctx)\n  }\n  push (ctx: object) {\n    return this.contexts.push(ctx)\n  }\n  pop (ctx?: object): object | undefined {\n    if (!arguments.length) {\n      return this.contexts.pop()\n    }\n    const i = this.contexts.findIndex(scope => scope === ctx)\n    if (i === -1) {\n      throw new TypeError('scope not found, cannot pop')\n    }\n    return this.contexts.splice(i, 1)[0]\n  }\n  findContextFor (key: string, filter: ((conttext: object) => boolean) = () => true) {\n    for (let i = this.contexts.length - 1; i >= 0; i--) {\n      const candidate = this.contexts[i]\n      if (!filter(candidate)) continue\n      if (key in candidate) {\n        return candidate\n      }\n    }\n    return null\n  }\n  private readProperty (obj: IContext, key: string) {\n    let val\n    if (_.isNil(obj)) {\n      val = undefined\n    } else {\n      obj = toLiquid(obj)\n      val = key === 'size' ? readSize(obj) : obj[key]\n      if (_.isFunction(obj.liquid_method_missing)) {\n        val = obj.liquid_method_missing!(key)\n      }\n    }\n    if (_.isNil(val) && this.opts.strict_variables) {\n      throw new TypeError(`undefined variable: ${key}`)\n    }\n    return val\n  }\n\n  /*\n   * Parse property access sequence from access string\n   * @example\n   * accessSeq(\"foo.bar\")            // ['foo', 'bar']\n   * accessSeq(\"foo['bar']\")      // ['foo', 'bar']\n   * accessSeq(\"foo['b]r']\")      // ['foo', 'b]r']\n   * accessSeq(\"foo[bar.coo]\")    // ['foo', 'bar'], for bar.coo == 'bar'\n   */\n  propertyAccessSeq (str: string) {\n    str = String(str)\n    const seq: string[] = []\n    let name = ''\n    let j\n    let i = 0\n    while (i < str.length) {\n      switch (str[i]) {\n        case '[':\n          push()\n\n          const delemiter = str[i + 1]\n          if (/['\"]/.test(delemiter)) { // foo[\"bar\"]\n            j = str.indexOf(delemiter, i + 2)\n            assert(j !== -1, `unbalanced ${delemiter}: ${str}`)\n            name = str.slice(i + 2, j)\n            push()\n            i = j + 2\n          } else { // foo[bar.coo]\n            j = matchRightBracket(str, i + 1)\n            assert(j !== -1, `unbalanced []: ${str}`)\n            name = str.slice(i + 1, j)\n            if (!lexical.isInteger(name)) { // foo[bar] vs. foo[1]\n              name = String(this.get(name))\n            }\n            push()\n            i = j + 1\n          }\n          break\n        case '.':// foo.bar, foo[0].bar\n          push()\n          i++\n          break\n        default:// foo.bar\n          name += str[i]\n          i++\n      }\n    }\n    push()\n\n    if (!seq.length) {\n      throw new TypeError(`invalid path:\"${str}\"`)\n    }\n    return seq\n\n    function push () {\n      if (name.length) seq.push(name)\n      name = ''\n    }\n  }\n}\n\nfunction toLiquid (obj: IContext) {\n  if (_.isFunction(obj.to_liquid)) {\n    return obj.to_liquid()\n  }\n  if (_.isFunction(obj.toLiquid)) {\n    return obj.toLiquid()\n  }\n  return obj\n}\n\nfunction readSize (obj: IContext) {\n  if (!_.isNil(obj.size)) return obj.size\n  if (_.isArray(obj) || _.isString(obj)) return obj.length\n  return obj.size\n}\n\nfunction matchRightBracket (str: string, begin: number) {\n  let stack = 1 // count of '[' - count of ']'\n  for (let i = begin; i < str.length; i++) {\n    if (str[i] === '[') {\n      stack++\n    }\n    if (str[i] === ']') {\n      stack--\n      if (stack === 0) {\n        return i\n      }\n    }\n  }\n  return -1\n}\n","export class CaptureScope {}\nexport class AssignScope {}\nexport class IncrementScope {}\nexport class DecrementScope {}\n","import { last } from '../util/underscore'\nimport IFS from './ifs'\n\nfunction domResolve (root: string, path: string) {\n  const base = document.createElement('base')\n  base.href = root\n\n  const head = document.getElementsByTagName('head')[0]\n  head.insertBefore(base, head.firstChild)\n\n  const a = document.createElement('a')\n  a.href = path\n  const resolved = a.href\n  head.removeChild(base)\n\n  return resolved\n}\n\nfunction resolve (root: string, filepath: string, ext: string) {\n  if (root.length && last(root) !== '/') root += '/'\n  const url = domResolve(root, filepath)\n  return url.replace(/^(\\w+:\\/\\/[^/]+)(\\/[^?]+)/, (str, origin, path) => {\n    const last = path.split('/').pop()\n    if (/\\.\\w+$/.test(last)) return str\n    return origin + path + ext\n  })\n}\n\nasync function readFile (url: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        resolve(xhr.responseText as string)\n      } else {\n        reject(new Error(xhr.statusText))\n      }\n    }\n    xhr.onerror = () => {\n      reject(new Error('An error occurred whilst receiving the response.'))\n    }\n    xhr.open('GET', url)\n    xhr.send()\n  })\n}\n\nasync function exists () {\n  return true\n}\n\nexport default { readFile, resolve, exists } as IFS\n","export default class Token {\n  type: string = 'notset'\n  line: number\n  col: number\n  raw: string\n  input: string\n  file?: string\n  value: string\n  constructor (raw: string, input: string, line: number, col: number, file?: string) {\n    this.col = col\n    this.line = line\n    this.raw = raw\n    this.value = raw\n    this.input = input\n    this.file = file\n  }\n}\n","import whiteSpaceCtrl from './whitespace-ctrl'\nimport HTMLToken from './html-token'\nimport TagToken from './tag-token'\nimport Token from './token'\nimport OutputToken from './output-token'\nimport { TokenizationError } from 'src/util/error'\nimport { NormalizedFullOptions, applyDefault } from '../liquid-options'\n\nenum ParseState { HTML, OUTPUT, TAG }\n\nexport default class Tokenizer {\n  options: NormalizedFullOptions\n  constructor (options?: NormalizedFullOptions) {\n    this.options = applyDefault(options)\n  }\n  tokenize (input: string, file?: string) {\n    const tokens: Token[] = []\n    const tagL = this.options.tag_delimiter_left\n    const tagR = this.options.tag_delimiter_right\n    const outputL = this.options.output_delimiter_left\n    const outputR = this.options.output_delimiter_right\n    let p = 0\n    let curLine = 1\n    let state = ParseState.HTML\n    let buffer = ''\n    let lineBegin = 0\n    let line = 1\n    let col = 1\n\n    while (p < input.length) {\n      if (input[p] === '\\n') {\n        curLine++\n        lineBegin = p + 1\n      }\n      if (state === ParseState.HTML) {\n        if (input.substr(p, outputL.length) === outputL) {\n          if (buffer) tokens.push(new HTMLToken(buffer, input, line, col, file))\n          buffer = outputL\n          line = curLine\n          col = p - lineBegin + 1\n          p += outputL.length\n          state = ParseState.OUTPUT\n          continue\n        } else if (input.substr(p, tagL.length) === tagL) {\n          if (buffer) tokens.push(new HTMLToken(buffer, input, line, col, file))\n          buffer = tagL\n          line = curLine\n          col = p - lineBegin + 1\n          p += tagL.length\n          state = ParseState.TAG\n          continue\n        }\n      } else if (state === ParseState.OUTPUT && input.substr(p, outputR.length) === outputR) {\n        buffer += outputR\n        tokens.push(new OutputToken(buffer, buffer.slice(outputL.length, -outputR.length), input, line, col, file))\n        p += outputR.length\n        buffer = ''\n        line = curLine\n        col = p - lineBegin + 1\n        state = ParseState.HTML\n        continue\n      } else if (input.substr(p, tagR.length) === tagR) {\n        buffer += tagR\n        tokens.push(new TagToken(buffer, buffer.slice(tagL.length, -tagR.length), input, line, col, file))\n        p += tagR.length\n        buffer = ''\n        line = curLine\n        col = p - lineBegin + 1\n        state = ParseState.HTML\n        continue\n      }\n      buffer += input[p++]\n    }\n    if (state !== ParseState.HTML) {\n      const t = state === ParseState.OUTPUT ? 'output' : 'tag'\n      const str = buffer.length > 16 ? buffer.slice(0, 13) + '...' : buffer\n      throw new TokenizationError(\n        `${t} \"${str}\" not closed`,\n        new Token(buffer, input, line, col, file)\n      )\n    }\n    if (buffer) tokens.push(new HTMLToken(buffer, input, line, col, file))\n\n    whiteSpaceCtrl(tokens, this.options)\n    return tokens\n  }\n}\n","import Token from './token'\n\nexport default class HTMLToken extends Token {\n  constructor (str: string, input: string, line: number, col: number, file?: string) {\n    super(str, input, line, col, file)\n    this.type = 'html'\n    this.value = str\n  }\n}\n","import Token from './token'\nimport { last } from 'src/util/underscore'\n\nexport default class DelimitedToken extends Token {\n  trimLeft: boolean\n  trimRight: boolean\n  constructor (raw: string, value: string, input: string, line: number, pos: number, file?: string) {\n    super(raw, input, line, pos, file)\n    this.trimLeft = value[0] === '-'\n    this.trimRight = last(value) === '-'\n    this.value = value\n      .slice(\n        this.trimLeft ? 1 : 0,\n        this.trimRight ? -1 : value.length\n      )\n      .trim()\n  }\n}\n","import DelimitedToken from './delimited-token'\nimport { TokenizationError } from 'src/util/error'\nimport * as lexical from './lexical'\n\nexport default class TagToken extends DelimitedToken {\n  name: string\n  args: string\n  constructor (raw: string, value: string, input: string, line: number, pos: number, file?: string) {\n    super(raw, value, input, line, pos, file)\n    this.type = 'tag'\n    const match = this.value.match(lexical.tagLine)\n    if (!match) {\n      throw new TokenizationError(`illegal tag syntax`, this)\n    }\n    this.name = match[1]\n    this.args = match[2]\n  }\n}\n","import DelimitedToken from './delimited-token'\n\nexport default class OutputToken extends DelimitedToken {\n  constructor (raw: string, value: string, input: string, line: number, pos: number, file?: string) {\n    super(raw, value, input, line, pos, file)\n    this.type = 'output'\n  }\n}\n","import DelimitedToken from 'src/parser/delimited-token'\nimport Token from 'src/parser/token'\nimport TagToken from 'src/parser/tag-token'\nimport { NormalizedFullOptions } from 'src/liquid-options'\n\nexport default function whiteSpaceCtrl (tokens: Token[], options: NormalizedFullOptions) {\n  options = { greedy: true, ...options }\n  let inRaw = false\n\n  tokens.forEach((token: Token, i: number) => {\n    if (shouldTrimLeft(token as DelimitedToken, inRaw, options)) {\n      trimLeft(tokens[i - 1], options.greedy)\n    }\n\n    if (token.type === 'tag' && (token as TagToken).name === 'raw') inRaw = true\n    if (token.type === 'tag' && (token as TagToken).name === 'endraw') inRaw = false\n\n    if (shouldTrimRight(token as DelimitedToken, inRaw, options)) {\n      trimRight(tokens[i + 1], options.greedy)\n    }\n  })\n}\n\nfunction shouldTrimLeft (token: DelimitedToken, inRaw: boolean, options: NormalizedFullOptions) {\n  if (inRaw) return false\n  if (token.type === 'tag') return token.trimLeft || options.trim_tag_left\n  if (token.type === 'output') return token.trimLeft || options.trim_output_left\n}\n\nfunction shouldTrimRight (token: DelimitedToken, inRaw: boolean, options: NormalizedFullOptions) {\n  if (inRaw) return false\n  if (token.type === 'tag') return token.trimRight || options.trim_tag_right\n  if (token.type === 'output') return token.trimRight || options.trim_output_right\n}\n\nfunction trimLeft (token: Token, greedy: boolean) {\n  if (!token || token.type !== 'html') return\n\n  const rLeft = greedy ? /\\s+$/g : /[\\t\\r ]*$/g\n  token.value = token.value.replace(rLeft, '')\n}\n\nfunction trimRight (token: Token, greedy: boolean) {\n  if (!token || token.type !== 'html') return\n\n  const rRight = greedy ? /^\\s+/g : /^[\\t\\r ]*\\n?/g\n  token.value = token.value.replace(rRight, '')\n}\n","import { RenderError } from 'src/util/error'\nimport assert from 'src/util/assert'\nimport Scope from 'src/scope/scope'\nimport ITemplate from 'src/template/itemplate'\n\nexport default class Render {\n  async renderTemplates (templates: ITemplate[], scope: Scope) {\n    assert(scope, 'unable to evalTemplates: scope undefined')\n\n    let html = ''\n    for (const tpl of templates) {\n      try {\n        html += await tpl.render(scope)\n      } catch (e) {\n        if (e.name === 'RenderBreakError') {\n          e.resolvedHTML = html\n          throw e\n        }\n        throw e.name === 'RenderError' ? e : new RenderError(e, tpl)\n      }\n    }\n    return html\n  }\n}\n","import * as lexical from '../parser/lexical'\nimport assert from '../util/assert'\nimport Scope from 'src/scope/scope'\nimport { range } from 'src/util/underscore'\n\nconst operators = {\n  '==': (l: any, r: any) => l === r,\n  '!=': (l: any, r: any) => l !== r,\n  '>': (l: any, r: any) => l !== null && r !== null && l > r,\n  '<': (l: any, r: any) => l !== null && r !== null && l < r,\n  '>=': (l: any, r: any) => l !== null && r !== null && l >= r,\n  '<=': (l: any, r: any) => l !== null && r !== null && l <= r,\n  'contains': (l: any, r: any) => {\n    if (!l) return false\n    if (typeof l.indexOf !== 'function') return false\n    return l.indexOf(r) > -1\n  },\n  'and': (l: any, r: any) => isTruthy(l) && isTruthy(r),\n  'or': (l: any, r: any) => isTruthy(l) || isTruthy(r)\n}\n\nexport function evalExp (exp: string, scope: Scope): any {\n  assert(scope, 'unable to evalExp: scope undefined')\n  const operatorREs = lexical.operators\n  let match\n  for (let i = 0; i < operatorREs.length; i++) {\n    const operatorRE = operatorREs[i]\n    const expRE = new RegExp(`^(${lexical.quoteBalanced.source})(${operatorRE.source})(${lexical.quoteBalanced.source})$`)\n    if ((match = exp.match(expRE))) {\n      const l = evalExp(match[1], scope)\n      const op = operators[match[2].trim()]\n      const r = evalExp(match[3], scope)\n      return op(l, r)\n    }\n  }\n\n  if ((match = exp.match(lexical.rangeLine))) {\n    const low = evalValue(match[1], scope)\n    const high = evalValue(match[2], scope)\n    return range(low, high + 1)\n  }\n\n  return evalValue(exp, scope)\n}\n\nexport function evalValue (str: string, scope: Scope) {\n  str = str && str.trim()\n  if (!str) return undefined\n\n  if (lexical.isLiteral(str)) {\n    return lexical.parseLiteral(str)\n  }\n  if (lexical.isVariable(str)) {\n    return scope.get(str)\n  }\n  throw new TypeError(`cannot eval '${str}' as value`)\n}\n\nexport function isTruthy (val: any): boolean {\n  return !isFalsy(val)\n}\n\nexport function isFalsy (val: any): boolean {\n  return val === false || undefined === val || val === null\n}\n","import { hashCapture } from 'src/parser/lexical'\nimport { evalValue } from 'src/render/syntax'\nimport Scope from 'src/scope/scope'\n\n/**\n * Key-Value Pairs Representing Tag Arguments\n * Example:\n *    For the markup `{% include 'head.html' foo='bar' %}`,\n *    hash['foo'] === 'bar'\n */\nexport default class Hash {\n  [key: string]: any\n  constructor (markup: string, scope: Scope) {\n    let match\n    hashCapture.lastIndex = 0\n    while ((match = hashCapture.exec(markup))) {\n      const k = match[1]\n      const v = match[2]\n      this[k] = evalValue(v, scope)\n    }\n  }\n}\n","export default abstract class Template<T> {\n  token: T;\n  constructor (token: T) {\n    this.token = token\n  }\n}\n","import { create, stringify } from 'src/util/underscore'\nimport assert from 'src/util/assert'\nimport Scope from 'src/scope/scope'\nimport ITagImpl from './itag-impl'\nimport ITagImplOptions from './itag-impl-options'\nimport Liquid from 'src/liquid'\nimport Hash from './hash'\nimport Template from 'src/template/template'\nimport ITemplate from 'src/template/itemplate'\nimport TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\n\nexport default class Tag extends Template<TagToken> implements ITemplate {\n  name: string\n  private impl: ITagImpl\n  static impls: { [key: string]: ITagImplOptions } = {}\n\n  constructor (token: TagToken, tokens: Token[], liquid: Liquid) {\n    super(token)\n    this.name = token.name\n\n    const impl = Tag.impls[token.name]\n    assert(impl, `tag ${token.name} not found`)\n    this.impl = create<ITagImplOptions, ITagImpl>(impl)\n    this.impl.liquid = liquid\n    if (this.impl.parse) {\n      this.impl.parse(token, tokens)\n    }\n  }\n  async render (scope: Scope) {\n    const hash = new Hash(this.token.args, scope)\n    const impl = this.impl\n    if (typeof impl.render !== 'function') {\n      return ''\n    }\n    const html = await impl.render(scope, hash)\n    return stringify(html)\n  }\n  static register (name: string, tag: ITagImplOptions) {\n    Tag.impls[name] = tag\n  }\n  static clear () {\n    Tag.impls = {}\n  }\n}\n","import assert from 'src/util/assert'\nimport * as lexical from 'src/parser/lexical'\nimport { evalValue } from 'src/render/syntax'\nimport Scope from 'src/scope/scope'\nimport { FilterImpl } from './filter-impl'\n\nconst valueRE = new RegExp(`${lexical.value.source}`, 'g')\n\nexport default class Filter {\n  name: string\n  impl: FilterImpl\n  args: string[]\n  private static impls: {[key: string]: FilterImpl} = {}\n\n  constructor (str: string, strictFilters: boolean = false) {\n    const match = lexical.filterLine.exec(str) as string[]\n    assert(match, 'illegal filter: ' + str)\n\n    const name = match[1]\n    const argList = match[2] || ''\n    const impl = Filter.impls[name]\n    if (!impl && strictFilters) throw new TypeError(`undefined filter: ${name}`)\n\n    this.name = name\n    this.impl = impl || (x => x)\n    this.args = this.parseArgs(argList)\n  }\n  parseArgs (argList: string): string[] {\n    let match; const args: string[] = []\n    while ((match = valueRE.exec(argList.trim()))) {\n      const v = match[0]\n      const re = new RegExp(`${v}\\\\s*:`, 'g')\n      const keyMatch = re.exec(match.input)\n      const currentMatchIsKey = keyMatch && keyMatch.index === match.index\n      currentMatchIsKey ? args.push(`'${v}'`) : args.push(v)\n    }\n    return args\n  }\n  render (value: any, scope: Scope): any {\n    const args = this.args.map(arg => evalValue(arg, scope))\n    return this.impl.apply(null, [value, ...args])\n  }\n  static register (name: string, filter: FilterImpl) {\n    Filter.impls[name] = filter\n  }\n  static clear () {\n    Filter.impls = {}\n  }\n}\n","import Token from 'src/parser/token'\nimport ITemplate from 'src/template/itemplate'\nimport TagToken from './tag-token'\n\ntype ParseToken = ((token: Token, remainTokens: Array<Token>) => ITemplate)\n\nexport default class ParseStream {\n  private tokens: Array<Token>\n  private handlers: {[key: string]: (arg: any) => void} = {}\n  private stopRequested: boolean = false\n  private parseToken: ParseToken\n\n  constructor (tokens: Array<Token>, parseToken: ParseToken) {\n    this.tokens = tokens\n    this.parseToken = parseToken\n  }\n  on<T extends ITemplate | Token | undefined> (name: string, cb: (arg: T) => void): ParseStream {\n    this.handlers[name] = cb\n    return this\n  }\n  trigger <T extends Token | ITemplate> (event: string, arg?: T) {\n    const h = this.handlers[event]\n    if (typeof h === 'function') {\n      h(arg)\n      return true\n    }\n    return false\n  }\n  start () {\n    this.trigger('start')\n    let token: Token | undefined\n    while (!this.stopRequested && (token = this.tokens.shift())) {\n      if (this.trigger('token', token)) continue\n      if (token.type === 'tag' && this.trigger(`tag:${(<TagToken>token).name}`, token)) {\n        continue\n      }\n      const template = this.parseToken(token, this.tokens)\n      this.trigger('template', template)\n    }\n    if (!this.stopRequested) this.trigger('end')\n    return this\n  }\n  stop () {\n    this.stopRequested = true\n    return this\n  }\n}\n","import { evalExp } from 'src/render/syntax'\nimport * as lexical from 'src/parser/lexical'\nimport assert from 'src/util/assert'\nimport Filter from './filter/filter'\nimport Scope from 'src/scope/scope'\n\nexport default class {\n  initial: any\n  filters: Array<Filter> = []\n  constructor (str: string, strictFilters?: boolean) {\n    let match: RegExpExecArray | null = lexical.matchValue(str) as RegExpExecArray\n    assert(match, `illegal value string: ${str}`)\n\n    this.initial = match[0]\n    str = str.substr(match.index + match[0].length)\n\n    while ((match = lexical.filter.exec(str))) {\n      this.filters.push(new Filter(match[0].trim(), strictFilters))\n    }\n  }\n  value (scope: Scope) {\n    return this.filters.reduce(\n      (prev, filter) => filter.render(prev, scope),\n      evalExp(this.initial, scope))\n  }\n}\n","import Value from './value'\nimport { stringify } from 'src/util/underscore'\nimport Template from 'src/template/template'\nimport ITemplate from 'src/template/itemplate'\nimport Scope from 'src/scope/scope'\nimport OutputToken from 'src/parser/output-token'\n\nexport default class Output extends Template<OutputToken> implements ITemplate {\n  value: Value\n  constructor (token: OutputToken, strictFilters?: boolean) {\n    super(token)\n    this.value = new Value(token.value, strictFilters)\n  }\n  async render (scope: Scope): Promise<string> {\n    const html = await this.value.value(scope)\n    return stringify(html)\n  }\n}\n","import Template from 'src/template/template'\nimport ITemplate from 'src/template/itemplate'\nimport HTMLToken from 'src/parser/html-token'\n\nexport default class extends Template<HTMLToken> implements ITemplate {\n  str: string\n  constructor (token: HTMLToken) {\n    super(token)\n    this.str = token.value\n  }\n  async render (): Promise<string> {\n    return this.str\n  }\n}\n","import { ParseError } from '../util/error'\nimport Liquid from 'src/liquid'\nimport ParseStream from './parse-stream'\nimport Token from './token'\nimport TagToken from './tag-token'\nimport OutputToken from './output-token'\nimport Tag from 'src/template/tag/tag'\nimport Output from 'src/template/output'\nimport HTML from 'src/template/html'\nimport ITemplate from 'src/template/itemplate'\n\nexport default class Parser {\n  liquid: Liquid\n\n  constructor (liquid: Liquid) {\n    this.liquid = liquid\n  }\n  parse (tokens: Array<Token>) {\n    let token\n    const templates: ITemplate[] = []\n    while ((token = tokens.shift())) {\n      templates.push(this.parseToken(token, tokens))\n    }\n    return templates\n  }\n  parseToken (token: Token, remainTokens: Array<Token>) {\n    try {\n      if (token.type === 'tag') {\n        return new Tag(token as TagToken, remainTokens, this.liquid)\n      }\n      if (token.type === 'output') {\n        return new Output(token as OutputToken, this.liquid.options.strict_filters)\n      }\n      return new HTML(token)\n    } catch (e) {\n      throw new ParseError(e, token)\n    }\n  }\n  parseStream (tokens: Array<Token>) {\n    return new ParseStream(tokens, (token, tokens) => this.parseToken(token, tokens))\n  }\n}\n","import assert from 'src/util/assert'\nimport { identifier } from 'src/parser/lexical'\nimport { AssignScope } from 'src/scope/scopes'\nimport TagToken from 'src/parser/tag-token'\nimport Scope from 'src/scope/scope'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\n\nconst re = new RegExp(`(${identifier.source})\\\\s*=([^]*)`)\n\nexport default {\n  parse: function (token: TagToken) {\n    const match = token.args.match(re) as RegExpMatchArray\n    assert(match, `illegal token ${token.raw}`)\n    this.key = match[1]\n    this.value = match[2]\n  },\n  render: function (scope: Scope) {\n    const ctx = new AssignScope()\n    ctx[this.key] = this.liquid.evalValue(this.value, scope)\n    scope.push(ctx)\n    return Promise.resolve('')\n  }\n} as ITagImplOptions\n","/*\n * Call functions in serial until someone rejected.\n * @param {Array} iterable the array to iterate with.\n * @param {Array} iteratee returns a new promise.\n * The iteratee is invoked with three arguments: (value, index, iterable).\n */\nexport function mapSeries<T1, T2> (\n  iterable: T1[],\n  iteratee: (item: T1, idx: number, iterable: T1[]) => Promise<T2> | T2\n): Promise<T2[]> {\n  let ret = Promise.resolve(0)\n  const result: T2[] = []\n  iterable.forEach(function (item, idx) {\n    ret = ret\n      .then(() => iteratee(item, idx, iterable))\n      .then(x => result.push(x))\n  })\n  return ret.then(() => result)\n}\n","import { mapSeries } from 'src/util/promise'\nimport { isString, isObject, isArray } from 'src/util/underscore'\nimport { evalExp } from 'src/render/syntax'\nimport assert from 'src/util/assert'\nimport { identifier, value, hash } from 'src/parser/lexical'\nimport TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\nimport Scope from 'src/scope/scope'\nimport Hash from 'src/template/tag/hash'\nimport ITemplate from 'src/template/itemplate'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\nimport ParseStream from 'src/parser/parse-stream'\n\nconst re = new RegExp(`^(${identifier.source})\\\\s+in\\\\s+` +\n  `(${value.source})` +\n  `(?:\\\\s+${hash.source})*` +\n  `(?:\\\\s+(reversed))?` +\n  `(?:\\\\s+${hash.source})*$`)\n\nexport default <ITagImplOptions>{\n  type: 'block',\n  parse: function (tagToken: TagToken, remainTokens: Token[]) {\n    const match = re.exec(tagToken.args) as RegExpExecArray\n    assert(match, `illegal tag: ${tagToken.raw}`)\n    this.variable = match[1]\n    this.collection = match[2]\n    this.reversed = !!match[3]\n\n    this.templates = []\n    this.elseTemplates = []\n\n    let p\n    const stream: ParseStream = this.liquid.parser.parseStream(remainTokens)\n      .on('start', () => (p = this.templates))\n      .on('tag:else', () => (p = this.elseTemplates))\n      .on('tag:endfor', () => stream.stop())\n      .on('template', (tpl: ITemplate) => p.push(tpl))\n      .on('end', () => {\n        throw new Error(`tag ${tagToken.raw} not closed`)\n      })\n\n    stream.start()\n  },\n  render: async function (scope: Scope, hash: Hash) {\n    let collection = evalExp(this.collection, scope)\n\n    if (!isArray(collection)) {\n      if (isString(collection) && collection.length > 0) {\n        collection = [collection] as string[]\n      } else if (isObject(collection)) {\n        collection = Object.keys(collection).map((key) => [key, collection[key]]) as Array<[string, any]>\n      }\n    }\n    if (!isArray(collection) || !collection.length) {\n      return this.liquid.renderer.renderTemplates(this.elseTemplates, scope)\n    }\n\n    const offset = hash.offset || 0\n    const limit = (hash.limit === undefined) ? collection.length : hash.limit\n\n    collection = collection.slice(offset, offset + limit)\n    if (this.reversed) collection.reverse()\n\n    const contexts = collection.map((item: string, i: number) => {\n      const ctx = {}\n      ctx[this.variable] = item\n      ctx['forloop'] = {\n        first: i === 0,\n        index: i + 1,\n        index0: i,\n        last: i === collection.length - 1,\n        length: collection.length,\n        rindex: collection.length - i,\n        rindex0: collection.length - i - 1\n      }\n      return ctx\n    })\n\n    let html = ''\n    let finished = false\n    await mapSeries(contexts, async context => {\n      if (finished) return\n\n      scope.push(context)\n      try {\n        html += await this.liquid.renderer.renderTemplates(this.templates, scope)\n      } catch (e) {\n        if (e.name === 'RenderBreakError') {\n          html += e.resolvedHTML\n          if (e.message === 'break') {\n            finished = true\n          }\n        } else throw e\n      }\n      scope.pop(context)\n    })\n    return html\n  }\n}\n","import assert from 'src/util/assert'\nimport { identifier } from 'src/parser/lexical'\nimport { CaptureScope } from 'src/scope/scopes'\nimport TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\nimport Scope from 'src/scope/scope'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\n\nconst re = new RegExp(`(${identifier.source})`)\n\nexport default {\n  parse: function (tagToken: TagToken, remainTokens: Token[]) {\n    const match = tagToken.args.match(re) as RegExpMatchArray\n    assert(match, `${tagToken.args} not valid identifier`)\n\n    this.variable = match[1]\n    this.templates = []\n\n    const stream = this.liquid.parser.parseStream(remainTokens)\n    stream.on('tag:endcapture', () => stream.stop())\n      .on('template', (tpl) => this.templates.push(tpl))\n      .on('end', () => {\n        throw new Error(`tag ${tagToken.raw} not closed`)\n      })\n    stream.start()\n  },\n  render: async function (scope: Scope) {\n    const html = await this.liquid.renderer.renderTemplates(this.templates, scope)\n    const ctx = new CaptureScope()\n    ctx[this.variable] = html\n    scope.push(ctx)\n  }\n} as ITagImplOptions\n","import { evalExp } from 'src/render/syntax'\nimport TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\nimport Scope from 'src/scope/scope'\nimport ITemplate from 'src/template/itemplate'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\nimport ParseStream from 'src/parser/parse-stream'\n\nexport default {\n  parse: function (tagToken: TagToken, remainTokens: Token[]) {\n    this.cond = tagToken.args\n    this.cases = []\n    this.elseTemplates = []\n\n    let p: ITemplate[] = []\n    const stream: ParseStream = this.liquid.parser.parseStream(remainTokens)\n      .on('tag:when', (token: TagToken) => {\n        this.cases.push({\n          val: token.args,\n          templates: p = []\n        })\n      })\n      .on('tag:else', () => (p = this.elseTemplates))\n      .on('tag:endcase', () => stream.stop())\n      .on('template', (tpl: ITemplate) => p.push(tpl))\n      .on('end', () => {\n        throw new Error(`tag ${tagToken.raw} not closed`)\n      })\n\n    stream.start()\n  },\n\n  render: function (scope: Scope) {\n    for (let i = 0; i < this.cases.length; i++) {\n      const branch = this.cases[i]\n      const val = evalExp(branch.val, scope)\n      const cond = evalExp(this.cond, scope)\n      if (val === cond) {\n        return this.liquid.renderer.renderTemplates(branch.templates, scope)\n      }\n    }\n    return this.liquid.renderer.renderTemplates(this.elseTemplates, scope)\n  }\n} as ITagImplOptions\n","import TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\n\nexport default {\n  parse: function (tagToken: TagToken, remainTokens: Token[]) {\n    const stream = this.liquid.parser.parseStream(remainTokens)\n    stream\n      .on('token', (token: TagToken) => {\n        if (token.name === 'endcomment') stream.stop()\n      })\n      .on('end', () => {\n        throw new Error(`tag ${tagToken.raw} not closed`)\n      })\n    stream.start()\n  }\n} as ITagImplOptions\n","import assert from 'src/util/assert'\nimport { value, quotedLine } from 'src/parser/lexical'\nimport { evalValue } from 'src/render/syntax'\nimport BlockMode from 'src/scope/block-mode'\nimport TagToken from 'src/parser/tag-token'\nimport Scope from 'src/scope/scope'\nimport Hash from 'src/template/tag/hash'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\n\nconst staticFileRE = /[^\\s,]+/\nconst withRE = new RegExp(`with\\\\s+(${value.source})`)\n\nexport default <ITagImplOptions>{\n  parse: function (token: TagToken) {\n    let match = staticFileRE.exec(token.args)\n    if (match) {\n      this.staticValue = match[0]\n    }\n\n    match = value.exec(token.args)\n    if (match) {\n      this.value = match[0]\n    }\n\n    match = withRE.exec(token.args)\n    if (match) {\n      this.with = match[1]\n    }\n  },\n  render: async function (scope: Scope, hash: Hash) {\n    let filepath\n    if (scope.opts.dynamicPartials) {\n      if (quotedLine.exec(this.value)) {\n        const template = this.value.slice(1, -1)\n        filepath = await this.liquid.parseAndRender(template, scope.getAll(), scope.opts)\n      } else {\n        filepath = evalValue(this.value, scope)\n      }\n    } else {\n      filepath = this.staticValue\n    }\n    assert(filepath, `cannot include with empty filename`)\n\n    const originBlocks = scope.blocks\n    const originBlockMode = scope.blockMode\n\n    scope.blocks = {}\n    scope.blockMode = BlockMode.OUTPUT\n    if (this.with) {\n      hash[filepath] = evalValue(this.with, scope)\n    }\n    const templates = await this.liquid.getTemplate(filepath, scope.opts)\n    scope.push(hash)\n    const html = await this.liquid.renderer.renderTemplates(templates, scope)\n    scope.pop(hash)\n    scope.blocks = originBlocks\n    scope.blockMode = originBlockMode\n    return html\n  }\n}\n","import assert from 'src/util/assert'\nimport { identifier } from 'src/parser/lexical'\nimport { CaptureScope, AssignScope, DecrementScope } from 'src/scope/scopes'\nimport TagToken from 'src/parser/tag-token'\nimport Scope from 'src/scope/scope'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\n\nexport default {\n  parse: function (token: TagToken) {\n    const match = token.args.match(identifier) as RegExpMatchArray\n    assert(match, `illegal identifier ${token.args}`)\n    this.variable = match[0]\n  },\n  render: function (scope: Scope) {\n    let context = scope.findContextFor(\n      this.variable,\n      ctx => {\n        return !(ctx instanceof CaptureScope) && !(ctx instanceof AssignScope)\n      }\n    )\n    if (!context) {\n      context = new DecrementScope()\n      scope.unshift(context)\n    }\n    if (typeof context[this.variable] !== 'number') {\n      context[this.variable] = 0\n    }\n    return --context[this.variable]\n  }\n} as ITagImplOptions\n","import assert from 'src/util/assert'\nimport { value as rValue } from 'src/parser/lexical'\nimport { evalValue } from 'src/render/syntax'\nimport TagToken from 'src/parser/tag-token'\nimport Scope from 'src/scope/scope'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\n\nconst groupRE = new RegExp(`^(?:(${rValue.source})\\\\s*:\\\\s*)?(.*)$`)\nconst candidatesRE = new RegExp(rValue.source, 'g')\n\nexport default <ITagImplOptions>{\n  parse: function (tagToken: TagToken) {\n    let match: RegExpExecArray | null = groupRE.exec(tagToken.args) as RegExpExecArray\n    assert(match, `illegal tag: ${tagToken.raw}`)\n\n    this.group = match[1] || ''\n    const candidates = match[2]\n\n    this.candidates = []\n\n    while ((match = candidatesRE.exec(candidates))) {\n      this.candidates.push(match[0])\n    }\n    assert(this.candidates.length, `empty candidates: ${tagToken.raw}`)\n  },\n\n  render: function (scope: Scope) {\n    const group = evalValue(this.group, scope)\n    const fingerprint = `cycle:${group}:` + this.candidates.join(',')\n    const groups = scope.groups\n    let idx = groups[fingerprint]\n\n    if (idx === undefined) {\n      idx = groups[fingerprint] = 0\n    }\n\n    const candidate = this.candidates[idx]\n    idx = (idx + 1) % this.candidates.length\n    groups[fingerprint] = idx\n\n    return evalValue(candidate, scope)\n  }\n}\n","import { evalExp, isTruthy } from 'src/render/syntax'\nimport TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\nimport Scope from 'src/scope/scope'\nimport ITemplate from 'src/template/itemplate'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\nimport ParseStream from 'src/parser/parse-stream'\n\nexport default {\n  parse: function (tagToken: TagToken, remainTokens: Token[]) {\n    this.branches = []\n    this.elseTemplates = []\n\n    let p\n    const stream: ParseStream = this.liquid.parser.parseStream(remainTokens)\n      .on('start', () => this.branches.push({\n        cond: tagToken.args,\n        templates: (p = [])\n      }))\n      .on('tag:elsif', (token: TagToken) => {\n        this.branches.push({\n          cond: token.args,\n          templates: p = []\n        })\n      })\n      .on('tag:else', () => (p = this.elseTemplates))\n      .on('tag:endif', () => stream.stop())\n      .on('template', (tpl: ITemplate) => p.push(tpl))\n      .on('end', () => {\n        throw new Error(`tag ${tagToken.raw} not closed`)\n      })\n\n    stream.start()\n  },\n\n  render: function (scope: Scope) {\n    for (const branch of this.branches) {\n      const cond = evalExp(branch.cond, scope)\n      if (isTruthy(cond)) {\n        return this.liquid.renderer.renderTemplates(branch.templates, scope)\n      }\n    }\n    return this.liquid.renderer.renderTemplates(this.elseTemplates, scope)\n  }\n} as ITagImplOptions\n","import assert from 'src/util/assert'\nimport { identifier } from 'src/parser/lexical'\nimport { CaptureScope, AssignScope, IncrementScope } from 'src/scope/scopes'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\n\nexport default {\n  parse: function (token) {\n    const match = token.args.match(identifier)\n    assert(match, `illegal identifier ${token.args}`)\n    this.variable = match![0]\n  },\n  render: function (scope) {\n    let context = scope.findContextFor(\n      this.variable,\n      ctx => {\n        return !(ctx instanceof CaptureScope) && !(ctx instanceof AssignScope)\n      }\n    )\n    if (!context) {\n      context = new IncrementScope()\n      scope.unshift(context)\n    }\n    if (typeof context[this.variable] !== 'number') {\n      context[this.variable] = 0\n    }\n    const val = context[this.variable]\n    context[this.variable]++\n    return val\n  }\n} as ITagImplOptions\n","import assert from 'src/util/assert'\nimport { value as rValue } from 'src/parser/lexical'\nimport { evalValue } from 'src/render/syntax'\nimport BlockMode from 'src/scope/block-mode'\nimport TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\nimport Scope from 'src/scope/scope'\nimport Hash from 'src/template/tag/hash'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\n\nconst staticFileRE = /\\S+/\n\nexport default {\n  parse: function (token: TagToken, remainTokens: Token[]) {\n    let match = staticFileRE.exec(token.args)\n    if (match) {\n      this.staticLayout = match[0]\n    }\n\n    match = rValue.exec(token.args)\n    if (match) {\n      this.layout = match[0]\n    }\n\n    this.tpls = this.liquid.parser.parse(remainTokens)\n  },\n  render: async function (scope: Scope, hash: Hash) {\n    const layout = scope.opts.dynamicPartials\n      ? evalValue(this.layout, scope)\n      : this.staticLayout\n    assert(layout, `cannot apply layout with empty filename`)\n\n    // render the remaining tokens immediately\n    scope.blockMode = BlockMode.STORE\n    const html = await this.liquid.renderer.renderTemplates(this.tpls, scope)\n    if (scope.blocks[''] === undefined) {\n      scope.blocks[''] = html\n    }\n    const templates = await this.liquid.getTemplate(layout, scope.opts)\n    scope.push(hash)\n    scope.blockMode = BlockMode.OUTPUT\n    const partial = await this.liquid.renderer.renderTemplates(templates, scope)\n    scope.pop(hash)\n    return partial\n  }\n} as ITagImplOptions\n","import BlockMode from 'src/scope/block-mode'\nimport TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\nimport ITemplate from 'src/template/itemplate'\nimport Scope from 'src/scope/scope'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\nimport ParseStream from 'src/parser/parse-stream'\n\nexport default {\n  parse: function (token: TagToken, remainTokens: Token[]) {\n    const match = /\\w+/.exec(token.args)\n    this.block = match ? match[0] : ''\n    this.tpls = [] as ITemplate[]\n    const stream: ParseStream = this.liquid.parser.parseStream(remainTokens)\n      .on('tag:endblock', () => stream.stop())\n      .on('template', (tpl: ITemplate) => this.tpls.push(tpl))\n      .on('end', () => {\n        throw new Error(`tag ${token.raw} not closed`)\n      })\n    stream.start()\n  },\n  render: async function (scope: Scope) {\n    const childDefined = scope.blocks[this.block]\n    const html = childDefined !== undefined\n      ? childDefined\n      : await this.liquid.renderer.renderTemplates(this.tpls, scope)\n\n    if (scope.blockMode === BlockMode.STORE) {\n      scope.blocks[this.block] = html\n      return ''\n    }\n    return html\n  }\n} as ITagImplOptions\n","import TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\n\nexport default <ITagImplOptions>{\n  parse: function (tagToken: TagToken, remainTokens: Token[]) {\n    this.tokens = []\n\n    const stream = this.liquid.parser.parseStream(remainTokens)\n    stream\n      .on('token', (token: TagToken) => {\n        if (token.name === 'endraw') stream.stop()\n        else this.tokens.push(token)\n      })\n      .on('end', () => {\n        throw new Error(`tag ${tagToken.raw} not closed`)\n      })\n    stream.start()\n  },\n  render: function () {\n    return this.tokens.map((token: Token) => token.raw).join('')\n  }\n}\n","import { mapSeries } from 'src/util/promise'\nimport assert from 'src/util/assert'\nimport { evalExp } from 'src/render/syntax'\nimport { identifier, value, hash } from 'src/parser/lexical'\nimport TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\nimport ITemplate from 'src/template/itemplate'\nimport Scope from 'src/scope/scope'\nimport Hash from 'src/template/tag/hash'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\nimport ParseStream from 'src/parser/parse-stream'\n\nconst re = new RegExp(`^(${identifier.source})\\\\s+in\\\\s+` +\n  `(${value.source})` +\n  `(?:\\\\s+${hash.source})*$`)\n\nexport default {\n  parse: function (tagToken: TagToken, remainTokens: Token[]) {\n    const match = re.exec(tagToken.args) as RegExpExecArray\n    assert(match, `illegal tag: ${tagToken.raw}`)\n\n    this.variable = match[1]\n    this.collection = match[2]\n    this.templates = []\n\n    let p\n    const stream: ParseStream = this.liquid.parser.parseStream(remainTokens)\n      .on('start', () => (p = this.templates))\n      .on('tag:endtablerow', () => stream.stop())\n      .on('template', (tpl: ITemplate) => p.push(tpl))\n      .on('end', () => {\n        throw new Error(`tag ${tagToken.raw} not closed`)\n      })\n\n    stream.start()\n  },\n\n  render: async function (scope: Scope, hash: Hash) {\n    let collection = evalExp(this.collection, scope) || []\n    const offset = hash.offset || 0\n    const limit = (hash.limit === undefined) ? collection.length : hash.limit\n\n    collection = collection.slice(offset, offset + limit)\n    const cols = hash.cols || collection.length\n    const contexts = collection.map((item: any) => {\n      const ctx = {}\n      ctx[this.variable] = item\n      return ctx\n    })\n\n    let row: number = 0\n    let html = ''\n    await mapSeries(contexts, async (context, idx) => {\n      row = Math.floor(idx / cols) + 1\n      const col = (idx % cols) + 1\n      if (col === 1) {\n        if (row !== 1) {\n          html += '</tr>'\n        }\n        html += `<tr class=\"row${row}\">`\n      }\n\n      html += `<td class=\"col${col}\">`\n      scope.push(context)\n      html += await this.liquid.renderer.renderTemplates(this.templates, scope)\n      html += '</td>'\n      scope.pop(context)\n      return html\n    })\n    if (row > 0) {\n      html += '</tr>'\n    }\n    return html\n  }\n} as ITagImplOptions\n","import assign from './assign'\nimport For from './for'\nimport capture from './capture'\nimport Case from './case'\nimport comment from './comment'\nimport include from './include'\nimport decrement from './decrement'\nimport cycle from './cycle'\nimport If from './if'\nimport increment from './increment'\nimport layout from './layout'\nimport block from './block'\nimport raw from './raw'\nimport tablerow from './tablerow'\nimport unless from './unless'\nimport Break from './break'\nimport Continue from './continue'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\n\nconst tags: { [key: string]: ITagImplOptions } = {\n  assign, 'for': For, capture, 'case': Case, comment, include, decrement, increment, cycle, 'if': If, layout, block, raw, tablerow, unless, 'break': Break, 'continue': Continue\n}\n\nexport default tags\n","import { evalExp, isFalsy } from 'src/render/syntax'\nimport TagToken from 'src/parser/tag-token'\nimport Token from 'src/parser/token'\nimport Scope from 'src/scope/scope'\nimport ITagImplOptions from 'src/template/tag/itag-impl-options'\nimport ParseStream from 'src/parser/parse-stream'\n\nexport default {\n  parse: function (tagToken: TagToken, remainTokens: Token[]) {\n    this.templates = []\n    this.elseTemplates = []\n    let p\n    const stream: ParseStream = this.liquid.parser.parseStream(remainTokens)\n      .on('start', () => {\n        p = this.templates\n        this.cond = tagToken.args\n      })\n      .on('tag:else', () => (p = this.elseTemplates))\n      .on('tag:endunless', () => stream.stop())\n      .on('template', tpl => p.push(tpl))\n      .on('end', () => {\n        throw new Error(`tag ${tagToken.raw} not closed`)\n      })\n\n    stream.start()\n  },\n\n  render: function (scope: Scope) {\n    const cond = evalExp(this.cond, scope)\n    return isFalsy(cond)\n      ? this.liquid.renderer.renderTemplates(this.templates, scope)\n      : this.liquid.renderer.renderTemplates(this.elseTemplates, scope)\n  }\n} as ITagImplOptions\n","import { RenderBreakError } from 'src/util/error'\n\nexport default {\n  render: async function () {\n    throw new RenderBreakError('break')\n  }\n}\n","import { RenderBreakError } from 'src/util/error'\n\nexport default {\n  render: async function () {\n    throw new RenderBreakError('continue')\n  }\n}\n","const escapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&#34;',\n  \"'\": '&#39;'\n}\nconst unescapeMap = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&#34;': '\"',\n  '&#39;': \"'\"\n}\n\nfunction escape (str: string) {\n  return String(str).replace(/&|<|>|\"|'/g, m => escapeMap[m])\n}\n\nfunction unescape (str: string) {\n  return String(str).replace(/&(amp|lt|gt|#34|#39);/g, m => unescapeMap[m])\n}\n\nexport default {\n  'escape': escape,\n  'escape_once': (str: string) => escape(unescape(str)),\n  'newline_to_br': (v: string) => v.replace(/\\n/g, '<br />'),\n  'strip_html': (v: string) => v.replace(/<script.*?<\\/script>|<!--.*?-->|<style.*?<\\/style>|<.*?>/g, '')\n}\n","import { FilterImpl } from 'src/template/filter/filter-impl'\n\nexport default {\n  'append': (v: string, arg: string) => v + arg,\n  'prepend': (v: string, arg: string) => arg + v,\n  'capitalize': (str: string) => String(str).charAt(0).toUpperCase() + str.slice(1),\n  'lstrip': (v: string) => String(v).replace(/^\\s+/, ''),\n  'downcase': (v: string) => v.toLowerCase(),\n  'upcase': (str: string) => String(str).toUpperCase(),\n  'remove': (v: string, arg: string) => v.split(arg).join(''),\n  'remove_first': (v: string, l: string) => v.replace(l, ''),\n  'replace': (v: string, pattern: string, replacement: string) =>\n    String(v).split(pattern).join(replacement),\n  'replace_first': (v: string, arg1: string, arg2: string) => String(v).replace(arg1, arg2),\n  'rstrip': (str: string) => String(str).replace(/\\s+$/, ''),\n  'split': (v: string, arg: string) => String(v).split(arg),\n  'strip': (v: string) => String(v).trim(),\n  'strip_newlines': (v: string) => String(v).replace(/\\n/g, ''),\n  'truncate': (v: string, l: number = 50, o: string = '...') => {\n    v = String(v)\n    if (v.length <= l) return v\n    return v.substr(0, l - o.length) + o\n  },\n  'truncatewords': (v: string, l: number = 15, o: string = '...') => {\n    const arr = v.split(/\\s+/)\n    let ret = arr.slice(0, l).join(' ')\n    if (arr.length >= l) ret += o\n    return ret\n  }\n} as {[key: string]: FilterImpl}\n","export default {\n  'abs': (v: number) => Math.abs(v),\n  'ceil': (v: number) => Math.ceil(v),\n  'divided_by': (v: number, arg: number) => v / arg,\n  'floor': (v: number) => Math.floor(v),\n  'minus': bindFixed((v: number, arg: number) => v - arg),\n  'modulo': bindFixed((v: number, arg: number) => v % arg),\n  'round': (v: number, arg: number = 0) => {\n    const amp = Math.pow(10, arg)\n    return Math.round(v * amp) / amp\n  },\n  'plus': bindFixed((v: number, arg: number) => Number(v) + Number(arg)),\n  'times': (v: number, arg: number) => v * arg\n}\n\nfunction getFixed (v: number) {\n  const p = String(v).split('.')\n  return (p.length > 1) ? p[1].length : 0\n}\n\nfunction bindFixed (cb: (v: number, arg: number) => number) {\n  return (l: number, r: number) => {\n    const f = Math.max(getFixed(l), getFixed(r))\n    return cb(l, r).toFixed(f)\n  }\n}\n","export default {\n  'url_decode': (x: string) => x.split('+').map(decodeURIComponent).join(' '),\n  'url_encode': (x: string) => x.split(' ').map(encodeURIComponent).join('+')\n}\n","import { last } from 'src/util/underscore'\n\nexport default {\n  'join': (v: any[], arg: string) => v.join(arg === undefined ? ' ' : arg),\n  'last': <T>(v: T[]): T => last(v),\n  'first': <T>(v: T[]): T => v[0],\n  'map': <T1, T2>(arr: {[key: string]: T1}[], arg: string): T1[] => arr.map(v => v[arg]),\n  'reverse': (v: any[]) => v.reverse(),\n  'sort': <T>(v: T[], arg: (lhs: T, rhs: T) => number) => v.sort(arg),\n  'size': (v: string | any[]) => v.length,\n  'concat': <T1, T2>(v: T1[], arg: T2[] | T2): Array<T1 | T2> => Array.prototype.concat.call(v, arg),\n  'slice': <T>(v: T[], begin: number, length: number): T[] => {\n    if (length === undefined) length = 1\n    return v.slice(begin, begin + length)\n  },\n  'uniq': function<T> (arr: T[]): T[] {\n    const u = {}\n    return (arr || []).filter(val => {\n      if (u.hasOwnProperty(String(val))) return false\n      u[String(val)] = true\n      return true\n    })\n  }\n}\n","import { padStart } from './underscore'\n\nconst monthNames = [\n  'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n  'September', 'October', 'November', 'December'\n]\nconst dayNames = [\n  'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n]\nconst monthNamesShort = monthNames.map(abbr)\nconst dayNamesShort = dayNames.map(abbr)\nconst suffixes = {\n  1: 'st',\n  2: 'nd',\n  3: 'rd',\n  'default': 'th'\n}\n\nfunction abbr (str: string) {\n  return str.slice(0, 3)\n}\n\n// prototype extensions\nconst _date = {\n  daysInMonth: function (d: Date) {\n    const feb = _date.isLeapYear(d) ? 29 : 28\n    return [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  },\n\n  getDayOfYear: function (d: Date) {\n    let num = 0\n    for (let i = 0; i < d.getMonth(); ++i) {\n      num += _date.daysInMonth(d)[i]\n    }\n    return num + d.getDate()\n  },\n\n  getWeekOfYear: function (d: Date, startDay: number) {\n    // Skip to startDay of this week\n    const now = this.getDayOfYear(d) + (startDay - d.getDay())\n    // Find the first startDay of the year\n    const jan1 = new Date(d.getFullYear(), 0, 1)\n    const then = (7 - jan1.getDay() + startDay)\n    return padStart(String(Math.floor((now - then) / 7) + 1), 2, '0')\n  },\n\n  isLeapYear: function (d: Date) {\n    const year = d.getFullYear()\n    return !!((year & 3) === 0 && (year % 100 || (year % 400 === 0 && year)))\n  },\n\n  getSuffix: function (d: Date) {\n    const str = d.getDate().toString()\n    const index = parseInt(str.slice(-1))\n    return suffixes[index] || suffixes['default']\n  },\n\n  century: function (d: Date) {\n    return parseInt(d.getFullYear().toString().substring(0, 2), 10)\n  }\n}\n\nconst formatCodes = {\n  a: function (d: Date) {\n    return dayNamesShort[d.getDay()]\n  },\n  A: function (d: Date) {\n    return dayNames[d.getDay()]\n  },\n  b: function (d: Date) {\n    return monthNamesShort[d.getMonth()]\n  },\n  B: function (d: Date) {\n    return monthNames[d.getMonth()]\n  },\n  c: function (d: Date) {\n    return d.toLocaleString()\n  },\n  C: function (d: Date) {\n    return _date.century(d)\n  },\n  d: function (d: Date) {\n    return padStart(d.getDate(), 2, '0')\n  },\n  e: function (d: Date) {\n    return padStart(d.getDate(), 2)\n  },\n  H: function (d: Date) {\n    return padStart(d.getHours(), 2, '0')\n  },\n  I: function (d: Date) {\n    return padStart(String(d.getHours() % 12 || 12), 2, '0')\n  },\n  j: function (d: Date) {\n    return padStart(_date.getDayOfYear(d), 3, '0')\n  },\n  k: function (d: Date) {\n    return padStart(d.getHours(), 2)\n  },\n  l: function (d: Date) {\n    return padStart(String(d.getHours() % 12 || 12), 2)\n  },\n  L: function (d: Date) {\n    return padStart(d.getMilliseconds(), 3, '0')\n  },\n  m: function (d: Date) {\n    return padStart(d.getMonth() + 1, 2, '0')\n  },\n  M: function (d: Date) {\n    return padStart(d.getMinutes(), 2, '0')\n  },\n  p: function (d: Date) {\n    return (d.getHours() < 12 ? 'AM' : 'PM')\n  },\n  P: function (d: Date) {\n    return (d.getHours() < 12 ? 'am' : 'pm')\n  },\n  q: function (d: Date) {\n    return _date.getSuffix(d)\n  },\n  s: function (d: Date) {\n    return Math.round(d.valueOf() / 1000)\n  },\n  S: function (d: Date) {\n    return padStart(d.getSeconds(), 2, '0')\n  },\n  u: function (d: Date) {\n    return d.getDay() || 7\n  },\n  U: function (d: Date) {\n    return _date.getWeekOfYear(d, 0)\n  },\n  w: function (d: Date) {\n    return d.getDay()\n  },\n  W: function (d: Date) {\n    return _date.getWeekOfYear(d, 1)\n  },\n  x: function (d: Date) {\n    return d.toLocaleDateString()\n  },\n  X: function (d: Date) {\n    return d.toLocaleTimeString()\n  },\n  y: function (d: Date) {\n    return d.getFullYear().toString().substring(2, 4)\n  },\n  Y: function (d: Date) {\n    return d.getFullYear()\n  },\n  z: function (d: Date) {\n    const tz = d.getTimezoneOffset() / 60 * 100\n    return (tz > 0 ? '-' : '+') + padStart(String(Math.abs(tz)), 4, '0')\n  },\n  '%': function () {\n    return '%'\n  }\n};\n(formatCodes as any).h = formatCodes.b;\n(formatCodes as any).N = formatCodes.L\n\nexport default function (d: Date, format: string) {\n  let output = ''\n  let remaining = format\n\n  while (true) {\n    const r = /%./g\n    const results = r.exec(remaining)\n\n    // No more format codes. Add the remaining text and return\n    if (!results) {\n      return output + remaining\n    }\n\n    // Add the preceding text\n    output += remaining.slice(0, r.lastIndex - 2)\n    remaining = remaining.slice(r.lastIndex)\n\n    // Add the format code\n    const ch = results[0].charAt(1)\n    const func = formatCodes[ch]\n    output += func ? func(d) : '%' + ch\n  }\n}\n","import html from './html'\nimport str from './string'\nimport math from './math'\nimport url from './url'\nimport array from './array'\nimport date from './date'\nimport obj from './object'\n\nexport default { ...html, ...str, ...math, ...url, ...date, ...obj, ...array }\n","import strftime from 'src/util/strftime'\nimport { isString } from 'src/util/underscore'\n\nexport default {\n  'date': (v: string | Date, arg: string) => {\n    let date = v\n    if (v === 'now') {\n      date = new Date()\n    } else if (isString(v)) {\n      date = new Date(v)\n    }\n    return isValidDate(date) ? strftime(date, arg) : v\n  }\n}\n\nfunction isValidDate (date: any): date is Date {\n  return date instanceof Date && !isNaN(date.getTime())\n}\n","import { isTruthy } from 'src/render/syntax'\n\nexport default {\n  'default': <T1, T2>(v: T1, arg: T2): T1 | T2 => isTruthy(v) ? v : arg\n}\n","import Scope from './scope/scope'\nimport * as Types from './types'\nimport fs from 'src/fs'\nimport * as _ from './util/underscore'\nimport ITemplate from './template/itemplate'\nimport Tokenizer from './parser/tokenizer'\nimport Render from './render/render'\nimport Tag from './template/tag/tag'\nimport Filter from './template/filter/filter'\nimport Parser from './parser/parser'\nimport ITagImplOptions from './template/tag/itag-impl-options'\nimport Value from './template/value'\nimport { isTruthy, isFalsy, evalExp, evalValue } from './render/syntax'\nimport builtinTags from './builtin/tags'\nimport builtinFilters from './builtin/filters'\nimport { LiquidOptions, NormalizedFullOptions, applyDefault, normalize } from './liquid-options'\nimport { FilterImpl } from './template/filter/filter-impl'\n\nexport default class Liquid {\n  public options: NormalizedFullOptions\n  public renderer: Render\n  public parser: Parser\n  private cache: object = {}\n  private tokenizer: Tokenizer\n\n  constructor (opts: LiquidOptions = {}) {\n    this.options = applyDefault(normalize(opts))\n    this.parser = new Parser(this)\n    this.renderer = new Render()\n    this.tokenizer = new Tokenizer(this.options)\n\n    _.forOwn(builtinTags, (conf, name) => this.registerTag(name, conf))\n    _.forOwn(builtinFilters, (handler, name) => this.registerFilter(name, handler))\n  }\n  parse (html: string, filepath?: string) {\n    const tokens = this.tokenizer.tokenize(html, filepath)\n    return this.parser.parse(tokens)\n  }\n  render (tpl: Array<ITemplate>, ctx?: object, opts?: LiquidOptions) {\n    const options = { ...this.options, ...normalize(opts) }\n    const scope = new Scope(ctx, options)\n    return this.renderer.renderTemplates(tpl, scope)\n  }\n  async parseAndRender (html: string, ctx?: object, opts?: LiquidOptions) {\n    const tpl = await this.parse(html)\n    return this.render(tpl, ctx, opts)\n  }\n  async getTemplate (file: string, opts?: LiquidOptions) {\n    const options = normalize(opts)\n    const roots = options.root ? [...options.root, ...this.options.root] : this.options.root\n    const paths = roots.map(root => fs.resolve(root, file, this.options.extname))\n\n    for (const filepath of paths) {\n      if (!(await fs.exists(filepath))) continue\n\n      if (this.options.cache && this.cache[filepath]) return this.cache[filepath]\n      const value = this.parse(await fs.readFile(filepath), filepath)\n      if (this.options.cache) this.cache[filepath] = value\n      return value\n    }\n\n    const err = new Error('ENOENT') as any\n    err.message = `ENOENT: Failed to lookup \"${file}\" in \"${roots}\"`\n    err.code = 'ENOENT'\n    throw err\n  }\n  async renderFile (file: string, ctx?: object, opts?: LiquidOptions) {\n    const options = normalize(opts)\n    const templates = await this.getTemplate(file, options)\n    return this.render(templates, ctx, opts)\n  }\n  evalValue (str: string, scope: Scope) {\n    return new Value(str, this.options.strict_filters).value(scope)\n  }\n  registerFilter (name: string, filter: FilterImpl) {\n    return Filter.register(name, filter)\n  }\n  registerTag (name: string, tag: ITagImplOptions) {\n    return Tag.register(name, tag)\n  }\n  plugin (plugin: (this: Liquid, L: typeof Liquid) => void) {\n    return plugin.call(this, Liquid)\n  }\n  express () {\n    const self = this\n    return function (this: any, filePath: string, ctx: object, cb: (err: Error | null, html?: string) => void) {\n      const opts = { root: this.root }\n      self.renderFile(filePath, ctx, opts).then(html => cb(null, html), cb)\n    }\n  }\n  static default = Liquid\n  static isTruthy = isTruthy\n  static isFalsy = isFalsy\n  static evalExp = evalExp\n  static evalValue = evalValue\n  static Types = Types\n}\n"],"names":["toStr","Object","prototype","toString","arrToStr","Array","isString","value","call","isFunction","stringify","isNil","to_liquid","toLiquid","to_s","indexOf","cache","JSON","key","isObject","push","isArray","forOwn","object","iteratee","k","hasOwnProperty","last","arr","length","type","range","start","stop","step","undefined","i","padStart","str","ch","n","String","quoted","RegExp","source","quoteBalanced","number","bool","identifier","subscript","literal","variable","rangeLimit","rangeCapture","hash","hashCapture","tagLine","literalLine","variableLine","numberLine","boolLine","quotedLine","rangeLine","integerLine","valueDeclaration","valueList","filter","filterCapture","filterLine","operators","err","token","_super","message","_this","originalError","tslib_1.__extends","LiquidError","lines","begin","end","this","context","input","split","Math","max","line","min","_\r\n        .range","map","lineNumber","indicator","num","_.padStart","text","join","msg","file","col","mkMessage","stack","Error","name","update","tpl","predicate","AssertionError","BlockMode","defaultOptions","root","extname","dynamicPartials","trim_tag_right","trim_tag_left","trim_output_right","trim_output_left","greedy","tag_delimiter_left","tag_delimiter_right","output_delimiter_left","output_delimiter_right","strict_filters","strict_variables","normalize","options","_.isArray","_.isString","applyDefault","ctx","opts","OUTPUT","contexts","Scope","reduce","val","__assign","path","paths","propertyAccessSeq","scope","findContextFor","_.last","readProperty","v","some","_.isObject","unshift","arguments","pop","findIndex","TypeError","splice","candidate","obj","_.isNil","_.isFunction","size","liquid_method_missing","j","seq","delemiter","test","assert","slice","matchRightBracket","get","readFile","url","Promise","resolve","reject","xhr","XMLHttpRequest","onload","status","responseText","statusText","onerror","open","send","filepath","ext","base","document","createElement","href","head","getElementsByTagName","insertBefore","firstChild","a","resolved","removeChild","domResolve","replace","origin","exists","ParseState","raw","Token","pos","trimLeft","trimRight","trim","match","lexical.tagLine","TokenizationError","args","DelimitedToken","Tokenizer","tokens","tagL","tagR","outputL","outputR","p","curLine","state","HTML","buffer","lineBegin","substr","HTMLToken","TAG","OutputToken","TagToken","inRaw","forEach","rLeft","rRight","whiteSpaceCtrl","t","Render","templates","html","templates_1","_i","_a","render","_b","e_1","resolvedHTML","RenderError","==","l","r","!=",">","<",">=","<=","contains","and","isTruthy","or","evalExp","exp","operatorREs","lexical.operators","operatorRE","expRE","lexical.quoteBalanced","op","lexical.rangeLine","evalValue","res","Number","toLowerCase","lexical.parseLiteral","isFalsy","markup","lastIndex","exec","liquid","proto","impl","Tag","impls","create","parse","Hash","tag","Template","valueRE","lexical.value","strictFilters","lexical.filterLine","argList","Filter","x","parseArgs","keyMatch","index","arg","apply","parseToken","ParseStream","cb","handlers","event","h","trigger","stopRequested","shift","template","initial","lexical.filter","filters","default_1","prev","Value","Output","Parser","remainTokens","e","ParseError","re","AssignScope","mapSeries","iterable","ret","result","item","idx","then","tagToken","collection","reversed","elseTemplates","stream","parser","parseStream","on","keys","offset","limit","reverse","first","index0","rindex","rindex0","finished","renderer","renderTemplates","CaptureScope","cond","cases","branch","staticFileRE","withRE","staticValue","with","parseAndRender","getAll","originBlocks","blocks","originBlockMode","blockMode","getTemplate","DecrementScope","groupRE","rValue","candidatesRE","group","candidates","fingerprint","groups","branches","IncrementScope","staticLayout","layout","tpls","STORE","partial","block","childDefined","tags","assign","for","For","capture","case","Case","comment","include","decrement","increment","cycle","if","If","tablerow","cols","row","floor","unless","break","RenderBreakError","continue","escapeMap","&","\"","'","unescapeMap","&amp;","&lt;","&gt;","&#34;","&#39;","escape","m","escape_once","newline_to_br","strip_html","append","prepend","capitalize","charAt","toUpperCase","lstrip","downcase","upcase","remove","remove_first","pattern","replacement","replace_first","arg1","arg2","rstrip","strip","strip_newlines","truncate","o","truncatewords","abs","ceil","divided_by","minus","bindFixed","modulo","round","amp","pow","plus","times","getFixed","f","toFixed","url_decode","decodeURIComponent","url_encode","encodeURIComponent","sort","concat","uniq","u","monthNames","dayNames","monthNamesShort","abbr","dayNamesShort","suffixes","1","2","3","default","_date","daysInMonth","d","isLeapYear","getDayOfYear","getMonth","getDate","getWeekOfYear","startDay","now","getDay","Date","getFullYear","year","getSuffix","parseInt","century","substring","formatCodes","A","b","B","c","toLocaleString","C","H","getHours","I","L","getMilliseconds","M","getMinutes","P","q","s","valueOf","S","getSeconds","U","w","W","toLocaleDateString","X","toLocaleTimeString","y","Y","z","tz","getTimezoneOffset","%","N","math","date","isNaN","getTime","format","output","remaining","results","func","strftime","array","tokenizer","_.forOwn","builtinTags","conf","registerTag","builtinFilters","handler","registerFilter","Liquid","tokenize","roots","fs","paths_1","code","register","plugin","self","filePath","renderFile","Types"],"mappings":"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"}